diff --git a/cartridge/roles/vshard-router.lua b/cartridge/roles/vshard-router.lua
index b213c2d..ace49ae 100644
--- a/cartridge/roles/vshard-router.lua
+++ b/cartridge/roles/vshard-router.lua
@@ -2,7 +2,7 @@ local log = require('log')
 local vshard = require('vshard')
 local checks = require('checks')
 local errors = require('errors')
-
+local yaml = require('yaml')
 local vars = require('cartridge.vars').new('cartridge.roles.vshard-router')
 local pool = require('cartridge.pool')
 local utils = require('cartridge.utils')
@@ -53,6 +53,25 @@ local function get(group_name)
     return vars.routers[router_name]
 end
 
+local function save_to_yaml(native_data, filename)
+    log.warn('save_to_yaml ' .. filename)
+    local yaml_data = yaml.encode(native_data)
+    log.info(yaml_data)
+    local ok, err = file_write(
+        filename, yaml_data,
+        {'O_CREAT',  'O_WRONLY'}
+    )
+    if not ok then
+        log.error(err)
+        return false
+    end
+    if not file_exists(filename) then
+        log.error(filename .. ' not exist!')
+        return false
+    end
+    return true
+end
+
 local function apply_config(conf)
     checks('table')
 
@@ -65,6 +84,7 @@ local function apply_config(conf)
 
     for group_name, _ in pairs(vshard_groups) do
         local vshard_cfg = vshard_utils.get_vshard_config(group_name, conf)
+        save_to_yaml(vshard_cfg, '/tmp/vshard_cfg.yaml')
         local router_name = router_name(group_name)
 
         -- luacheck: ignore 542
@@ -161,7 +181,7 @@ local function bootstrap_group(group_name, vsgroup)
 
     local conf = confapplier.get_readonly()
     local vshard_cfg = vshard_utils.get_vshard_config(group_name, conf)
-
+    log.warn(yaml.encode(vshard_cfg))
     if next(vshard_cfg.sharding) == nil then
         return nil, e_bootstrap_vshard:new('Sharding config is empty')
     end
